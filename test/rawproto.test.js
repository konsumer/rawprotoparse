/* global describe, test, expect */

import protobuf from 'protobufjs'
import { readFile } from 'fs/promises'
import rawprotoparse, { getVal } from '../src/rawproto.js'

const proto = await protobuf.load(new URL('test.proto', import.meta.url).pathname)

describe('Simple proto generated by protobuf', () => {
  const Simple = proto.lookupType('Simple')

  const pb = Simple.encode({ a: 105 }).finish()

  /*
  08 69
  */

  test('default: prefix=f', () => {
    const r = rawprotoparse(pb)
    expect(r).toMatchSnapshot()
  })

  test('prefix=a', () => {
    const r = rawprotoparse(pb, { prefix: 'a' })
    expect(r).toMatchSnapshot()
  })
})

describe('Test proto generated by protobuf', () => {
  const Test = proto.lookupType('Test')

  const pb = Test.encode({
    nums: [1, 2, 3, 4, 5],
    num: 1,
    str: 'hello',
    children: [
      { num: 1, str: 'cool', children: [{ num: 1 }] },
      { num: 2, str: 'awesome', children: [{ num: 2 }] },
      { num: 3, str: 'neat', children: [{ num: 3 }] }
    ]
  }).finish()

  /*
  0A 05 01 02  03 04 05 10
  01 1A 05 68  65 6C 6C 6F
  22 0C 08 01  12 04 63 6F
  6F 6C 1A 02  08 01 22 0F
  08 02 12 07  61 77 65 73
  6F 6D 65 1A  02 08 02 22
  0C 08 03 12  04 6E 65 61
  74 1A 02 08  03
  */

  test('default: prefix=f, stringMode=auto, arrayMode=false', () => {
    const r = rawprotoparse(pb)
    expect(r).toMatchSnapshot()
  })

  test('prefix=a, stringMode=auto, arrayMode=false', () => {
    const r = rawprotoparse(pb, { prefix: 'a' })
    expect(r).toMatchSnapshot()
  })

  test('prefix=f, stringMode=auto, arrayMode=true', () => {
    const r = rawprotoparse(pb, { arrayMode: true })
    expect(r).toMatchSnapshot()
  })

  test('prefix=f, stringMode=buffer, arrayMode=false', () => {
    const r = rawprotoparse(pb, { stringMode: 'buffer' })
    expect(r).toMatchSnapshot()
  })

  test('prefix=f, stringMode=string, arrayMode=false', () => {
    const r = rawprotoparse(pb, { stringMode: 'string' })
    expect(r).toMatchSnapshot()
  })

  test('build a list of string-likes (type 2) with custom field-parser', () => {
    const strings = []
    const d = new TextDecoder()
    const valueHandler = (data, wireType, ...args) => {
      if (wireType === 2) {
        strings.push(d.decode(data))
      }

      // do default original thing
      return getVal(data, wireType, ...args)
    }

    const r = rawprotoparse(pb, { valueHandler })
    expect(r).toMatchSnapshot()
    expect(strings).toMatchSnapshot()
  })
})

describe('google apps', async () => {
  const hearthstone = await readFile(new URL('hearthstone.bin', import.meta.url).pathname)
  const pixelstarships = await readFile(new URL('pixelstarships.bin', import.meta.url).pathname)

  test('pixel starships is easy to find the title in', async () => {
    const app = rawprotoparse(pixelstarships).f1.f2.f4
    expect(app.f5).toBe('Pixel Starshipsâ„¢')
  })

  test('hearthstone cannot find title with regular parser', async () => {
    const app = rawprotoparse(hearthstone).f1.f2.f4
    // this is where the title is
    expect(typeof app.f5).toBe('object')
  })

  test('hearthstone can be fixed with a custom field-handler', async () => {
    const d = new TextDecoder()
    const valueHandler = (data, wireType, prefix, stringMode, arrayMode, vh, currentPath) => {
      if (wireType === 2) {
        if (currentPath === '.f1.f2.f4.f5') {
          return d.decode(data)
        }
      }
      return getVal(data, wireType, prefix, stringMode, arrayMode, vh, currentPath)
    }
    const app = rawprotoparse(hearthstone, { valueHandler }).f1.f2.f4
    expect(app.f5).toBe('Hearthstone')
  })
})
